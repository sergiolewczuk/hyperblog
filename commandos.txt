Estos son los comandos explicados y utilizados hasta el momento.

git reset (versión anterior) --hard “todo vuelve al estado anterior”

git branch rama “Crea rama”

git checkout rama “me puedo mover a la rama”

git push “Envia hacia otro repositorio”

git pull “Recibe de otro repositorio”

git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.

git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.

git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).

git merge: También usamos el comando git fetch con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.

git pull: Básicamente, git fetch y git merge al mismo tiempo.

pwd: Nos muestra la ruta de carpetas en la que te encuentras ahora mismo.

mkdir: Nos permite crear carpetas (por ejemplo, mkdir Carpeta-Importante).

touch: Nos permite crear archivos (por ejemplo, touch archivo.txt).

rm: Nos permite borrar un archivo o carpeta (por ejemplo, rm archivo.txt). Mucho cuidado con este comando, puedes borrar todo tu disco duro.

cat: Ver el contenido de un archivo (por ejemplo, cat nombre-archivo.txt).

ls: Nos permite cambiar ver los archivos de la carpeta donde estamos ahora mismo. Podemos usar uno o más argumentos para ver más información sobre estos archivos (los argumentos pueden ser – + el nombre del argumento o - + una sola letra o shortcut por cada argumento).

ls -a: Mostrar todos los archivos, incluso los ocultos.

ls -l: Ver todos los archivos como una lista.
cd: Nos permite navegar entre carpetas.

cd /: Ir a la ruta principal:

cd o cd ~: Ir a la ruta de tu usuario

cd carpeta/subcarpeta: Navegar a una ruta dentro de la carpeta donde estamos ahora mismo.

cd … (cd + dos puntos): Regresar una carpeta hacia atrás.

Si quieres referirte al directorio en el que te encuentras ahora mismo puedes usar cd . (cd + un punto).
history: Ver los últimos comandos que ejecutamos y un número especial con el que podemos repetir su ejecución.
! + número: Ejecutar algún comando con el número que nos muestra el comando history (por ejemplo, !72).
clear: Para limpiar la terminal. También podemos usar los atajos de teclado Ctrl + L o Command + L.

git diff commitA commitB ( ver la diferencia entre una versión y otra, no necesariamente todos los cambios desde la creación del archivo)